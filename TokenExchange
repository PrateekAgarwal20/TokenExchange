pragma solidity ^0.4.7;
import "Token.sol";
contract TokenExchange{

  function tokenExchange(){
  }

  //When used in mapping, this keeps track of how many of a specific
  //type of token a user has deposited or bought. When price == 0, token is not being sold.
	struct tokenBalance {
		uint numTokens;
		uint price;
	}

  //keeps track of how much Ether a user has
	mapping (address => uint) etherBalance;

  //maps users => tokens => tokenBalance balance structs. This keeps track
  //the amount of tokens and price they are selling said tokens for.
	mapping (address => mapping (address => tokenBalance)) tokenBalances;


	//this allows only users with tokens to call contracts
	modifier ownsTokens(address _owner, address _token) {
		if (balanceOf(_owner, _token) == 0) throw;
		_;
	}

  // allows user to deposit some number of tokens to the exchange
  // that you are willing to sell for some price.
  // Checks that the user has given the exchange an allowance of this token
  // and updates tokenBalances accordingly
  function depositToken(address _token, uint _amount){
    Token token = Token(_token);
    if (!token.transferFrom(msg.sender, this, _amount)) throw;
    tokenBalances[msg.sender][_token][tokenBalance].numTokens += _amount;
  }

  // allows users who have previously deposited tokens to reclaim possession of them.
  // Also allows users who have bought tokens to claim possession of them. The
  // decentralized exchange should use the tokens transfer function
  function withdrawToken(address _token, uint _amount) {
    Token token = Token(_token);
    uint _numTokens = tokenBalances[msg.sender][token][tokenBalance].numTokens;
    if(_numTokens < _amount) throw;
    transfer(msg.sender, _amount);
    tokenBalances[msg.sender][_token][tokenBalance].numTokens -= _amount;
  }


  // returns the number of tokens that a user has deposited of that specific
  // _token.    (this should be called getTokenBalance)
  function getTokenBalance(address _owner, address _token) returns uint tokenBalance {
    Token token = Token(_token);
    return tokenBalances[_owner][token][tokenBalance].numTokens;
  }

  //set the price you are willing to sell your tokens for (in Ether)
  function setPrice(address _token, uint _price) {
    Token token = Token(_token);
    tokenBalances[msg.sender][token][tokenBalance].price = _price;
  }

  // send this function with at least _amount * _price of token for that specific
  // seller, and have the tokens transferred into your ownership (within this
  // contract only, not in the token contract yet - that's what the withdrawTokens
  // function is for).
  function buyToken(address _token, address _seller, uint _amount) payable {
    Token token = Token(_token);
    if (!token.transferFrom(msg.sender, this, _amount)) throw;
    tokenBalances[msg.sender][token][tokenBalance].numTokens += _amount;
    etherBalance[msg.sender] -= _amount * tokenBalances[msg.sender][token][tokenBalance].price;
  }

  // withdraw _amount of Ether that you have in the exchange (from selling tokens).
  withdrawEther(uint _amount) payable {
    if(etherBalance[msg.sender] < _amount) throw;
    [msg.sender].send(_amount ether);
    etherBalance[msg.sender] -= _amount;
  }
